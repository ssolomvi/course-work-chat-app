plugins {
    id 'java'
    id "com.google.protobuf" version "0.9.4"
    id("org.springframework.boot") version ("2.4.5")
    id("io.spring.dependency-management") version ("1.1.4")

}

group = 'ru.mai'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'org.springframework.boot:spring-boot-starter:2.4.5'
    implementation 'org.postgresql:postgresql:42.2.24'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.5.2'

    // db
//    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.0.0'
//    implementation 'org.postgresql:postgresql:42.2.24'
//    implementation 'javax.persistence:javax.persistence-api:2.2'

    // protobuf, gRPC
    implementation 'com.google.protobuf:protobuf-java:4.26.1'
    implementation 'io.grpc:grpc-all:1.62.2'

    implementation 'javax.annotation:javax.annotation-api:1.3.2'

    // kafka
    implementation 'org.apache.kafka:kafka-clients:3.4.0'

    // json
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.10.0'

    // logging
    implementation 'ch.qos.logback:logback-classic:1.4.5'

    // configuration
    implementation 'com.typesafe:config:1.4.2'

    // cryptography-starter
    implementation project(path: ':cryptography-starter')

    // code generator
    compileOnly 'org.projectlombok:lombok:1.18.26'
    annotationProcessor 'org.projectlombok:lombok:1.18.26'

    // test
    testCompileOnly 'org.projectlombok:lombok:1.18.28'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.28'

    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

// to tell IDEA where generated code for gRPC will be
sourceSets {
    main {
        java {
            srcDir 'build/generated/source/proto/main/grpc'
            srcDir 'build/generated/source/proto/main/java'
        }
    }
}

protobuf {
    // Configure the protoc executable
    protoc {
        // Download from repositories
        artifact = 'com.google.protobuf:protoc:4.26.1'
    }

    // Locate the codegen plugins
    plugins {
        // Locate a plugin with name 'grpc'. This step is optional.
        // If you leave it empty, it uses the current directory.
        // If you don't specify it, protoc will try to use "protoc-gen-grpc" from
        // system search path.
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.63.0'
            // or
            // path = 'tools/protoc-gen-grpc-java'
        }
        // Any other plugins
    }

    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

test {
    useJUnitPlatform()
}