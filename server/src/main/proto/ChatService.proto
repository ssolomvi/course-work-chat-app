syntax = "proto3";

option java_multiple_files = true;
option java_package = "ru.mai";

package ru.mai;

service ChatService {
    /*  -------------------------------- HELLO -------------------------------- */
    rpc Connect (Login) returns (ConnectResponse);
    rpc Disconnect (Login) returns (Empty);

    rpc CheckCompanionStatus (ChatRoomLogins) returns (CompanionStatus);

    /*  -------------------------------- INIT / DELETE CHAT ROOM -------------------------------- */
    rpc InitRoom (InitRoomRequest) returns (InitRoomResponse);
    rpc CheckForInitRoomRequest (Login) returns (stream InitRoomResponse);

    rpc PassDiffieHellmanNumber (DiffieHellmanNumber) returns (Empty);
    rpc AnyDiffieHellmanNumber (Login) returns (stream DiffieHellmanNumber);

    rpc DeleteRoom (ChatRoomLogins) returns (CompanionStatus);
    rpc CheckForDeletedRoom (Login) returns (stream CompanionStatus);

    /*  -------------------------------- SENDING MESSAGES -------------------------------- */
    rpc SendMessage (MessageToCompanion) returns (Empty);

    rpc AnyMessages (Login) returns (stream MessageToCompanion);
}

/*  -------------------------------- MESSAGES -------------------------------- */

message Empty {}

message Login {
    string login = 1;
}

message ConnectResponse {
    string diffie_hellman_g = 1;
}

message CompanionStatus {
    string companion_login = 1;
    bool status = 2;
}

message InitRoomRequest {
    string own_login = 1;
    string companion_login = 2;
    string algorithm = 3;
}

message InitRoomResponse {
    string companion_login = 1;
    string algorithm = 2;
    string encryption_mode = 3;
    string padding_mode = 4;
    string init_vector = 5;
    string diffie_hellman_p = 6;
}

message DiffieHellmanNumber {
    string own_login = 1;
    string companion_login = 2;
    string number = 3;
}

message ChatRoomLogins {
    string own_login = 1;
    string companion_login = 2;
}

message MessageToCompanion {
    string companion_login = 1;
    string kafka_message = 2;
}