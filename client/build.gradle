plugins {
    id 'java'
    id 'com.vaadin' version '24.3.11'
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.4'
    id "com.google.protobuf" version "0.9.4"
}

group = 'ru.mai'
version = '1.0-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('vaadinVersion', "24.3.11")
}

dependencies {
    // spring boot
    implementation 'org.springframework.boot:spring-boot-starter'

    // protobuf, gRPC
    implementation 'com.google.protobuf:protobuf-java:4.26.1'
    implementation 'io.grpc:grpc-all:1.63.0'

    implementation 'org.springframework.boot:spring-boot-starter-web'

    // kafka
    implementation 'org.apache.kafka:kafka-clients:3.4.0'

    // vaadin
    implementation 'com.vaadin:vaadin-spring-boot-starter:24.3.11'

    // annotations
    implementation 'javax.annotation:javax.annotation-api:1.3.2'

    // jpa
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // postgresql
    implementation 'org.postgresql:postgresql:42.6.0'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // cryptography
    implementation project(path: ':cryptography-starter')

    // code generation
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // docker containers
    implementation 'org.springframework.boot:spring-boot-docker-compose'

    // tests
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
    imports {
        mavenBom "com.vaadin:vaadin-bom:${vaadinVersion}"
    }
}

// to tell IDEA where generated code for gRPC will be
sourceSets {
    main {
        java {
            srcDir 'build/generated/source/proto/main/grpc'
            srcDir 'build/generated/source/proto/main/java'
        }
    }
}

protobuf {
    // Configure the protoc executable
    protoc {
        // Download from repositories
        artifact = 'com.google.protobuf:protoc:4.26.1'
    }

    // Locate the codegen plugins
    plugins {
        // Locate a plugin with name 'grpc'. This step is optional.
        // If you leave it empty, it uses the current directory.
        // If you don't specify it, protoc will try to use "protoc-gen-grpc" from
        // system search path.
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.63.0'
            // or
            // path = 'tools/protoc-gen-grpc-java'
        }
        // Any other plugins
    }

    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

test {
    useJUnitPlatform()
}